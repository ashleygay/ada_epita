#pragma once

class Processor;

#include <instructionargs.hpp>
#include <registers.hpp>
#include <word_operations.hpp>

class Instruction {
 public:
  virtual void exec(Processor *p) = 0;
  virtual const char *toStr() = 0;
  virtual uint16_t opCode() = 0;
  virtual int nbCycles() = 0;
  virtual bool hasArg() = 0;
  virtual void setArg(InstructionArg & args) = 0;
  virtual int argSize() = 0;
};

class LD_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_AX"; } virtual uint16_t opCode() { return 0x3E; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };
class LD_BX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_BX"; } virtual uint16_t opCode() { return 0x06; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };
class LD_CX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_CX"; } virtual uint16_t opCode() { return 0x0E; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };
class LD_DX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_DX"; } virtual uint16_t opCode() { return 0x16; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };
class LD_EX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_EX"; } virtual uint16_t opCode() { return 0x1E; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };
class LD_HX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HX"; } virtual uint16_t opCode() { return 0x26; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };
class LD_LX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_LX"; } virtual uint16_t opCode() { return 0x2E; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };

class LD_AA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_AA"; } virtual uint16_t opCode() { return 0x7F; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_AB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_AB"; } virtual uint16_t opCode() { return 0x78; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_AC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_AC"; } virtual uint16_t opCode() { return 0x79; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_AD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_AD"; } virtual uint16_t opCode() { return 0x7A; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_AE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_AE"; } virtual uint16_t opCode() { return 0x7B; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_AH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_AH"; } virtual uint16_t opCode() { return 0x7C; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_AL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_AL"; } virtual uint16_t opCode() { return 0x7D; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_AHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_AHL"; } virtual uint16_t opCode() { return 0x7E; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_BA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_BA"; } virtual uint16_t opCode() { return 0x47; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_BB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_BB"; } virtual uint16_t opCode() { return 0x40; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_BC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_BC"; } virtual uint16_t opCode() { return 0x41; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_BD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_BD"; } virtual uint16_t opCode() { return 0x42; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_BE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_BE"; } virtual uint16_t opCode() { return 0x43; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_BH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_BH"; } virtual uint16_t opCode() { return 0x44; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_BL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_BL"; } virtual uint16_t opCode() { return 0x45; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_BHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_BHL"; } virtual uint16_t opCode() { return 0x46; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_CA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_CA"; } virtual uint16_t opCode() { return 0x4F; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_CB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_CB"; } virtual uint16_t opCode() { return 0x48; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_CC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_CC"; } virtual uint16_t opCode() { return 0x49; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_CD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_CD"; } virtual uint16_t opCode() { return 0x4A; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_CE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_CE"; } virtual uint16_t opCode() { return 0x4B; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_CH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_CH"; } virtual uint16_t opCode() { return 0x4C; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_CL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_CL"; } virtual uint16_t opCode() { return 0x4D; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_CHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_CHL"; } virtual uint16_t opCode() { return 0x4E; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_DA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_DA"; } virtual uint16_t opCode() { return 0x57; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_DB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_DB"; } virtual uint16_t opCode() { return 0x50; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_DC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_DC"; } virtual uint16_t opCode() { return 0x51; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_DD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_DD"; } virtual uint16_t opCode() { return 0x52; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_DE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_DE"; } virtual uint16_t opCode() { return 0x53; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_DH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_DH"; } virtual uint16_t opCode() { return 0x54; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_DL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_DL"; } virtual uint16_t opCode() { return 0x55; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_DHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_DHL"; } virtual uint16_t opCode() { return 0x56; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_EA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_EA"; } virtual uint16_t opCode() { return 0x5F; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_EB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_EB"; } virtual uint16_t opCode() { return 0x58; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_EC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_EC"; } virtual uint16_t opCode() { return 0x59; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_ED : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_ED"; } virtual uint16_t opCode() { return 0x5A; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_EE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_EE"; } virtual uint16_t opCode() { return 0x5B; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_EH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_EH"; } virtual uint16_t opCode() { return 0x5C; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_EL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_EL"; } virtual uint16_t opCode() { return 0x5D; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_EHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_EHL"; } virtual uint16_t opCode() { return 0x5E; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HA"; } virtual uint16_t opCode() { return 0x67; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HB"; } virtual uint16_t opCode() { return 0x60; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HC"; } virtual uint16_t opCode() { return 0x61; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HD"; } virtual uint16_t opCode() { return 0x62; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HE"; } virtual uint16_t opCode() { return 0x63; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HH"; } virtual uint16_t opCode() { return 0x64; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HL"; } virtual uint16_t opCode() { return 0x65; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HHL"; } virtual uint16_t opCode() { return 0x66; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_LA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_LA"; } virtual uint16_t opCode() { return 0x6F; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_LB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_LB"; } virtual uint16_t opCode() { return 0x68; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_LC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_LC"; } virtual uint16_t opCode() { return 0x69; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_LD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_LD"; } virtual uint16_t opCode() { return 0x6A; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_LE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_LE"; } virtual uint16_t opCode() { return 0x6B; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_LH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_LH"; } virtual uint16_t opCode() { return 0x6C; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_LL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_LL"; } virtual uint16_t opCode() { return 0x6D; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_LHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_LHL"; } virtual uint16_t opCode() { return 0x6E; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HLB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HLB"; } virtual uint16_t opCode() { return 0x70; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HLC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HLC"; } virtual uint16_t opCode() { return 0x71; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HLD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HLD"; } virtual uint16_t opCode() { return 0x72; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HLE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HLE"; } virtual uint16_t opCode() { return 0x73; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HLH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HLH"; } virtual uint16_t opCode() { return 0x74; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HLL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HLL"; } virtual uint16_t opCode() { return 0x75; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HLn : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HLn"; } virtual uint16_t opCode() { return 0x36; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };

class LD_ABC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_ABC"; } virtual uint16_t opCode() { return 0x0A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_BCA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_BCA"; } virtual uint16_t opCode() { return 0x02; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_ADE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_ADE"; } virtual uint16_t opCode() { return 0x1A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_DEA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_DEA"; } virtual uint16_t opCode() { return 0x12; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HLA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HLA"; } virtual uint16_t opCode() { return 0x77; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_Ann : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_Ann"; } virtual uint16_t opCode() { return 0xFA; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class LD_nnA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_nnA"; } virtual uint16_t opCode() { return 0xEA; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };

class LD_AC2 : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_AC2"; } virtual uint16_t opCode() { return 0xF2; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_C2A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_C2A"; } virtual uint16_t opCode() { return 0xE2; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class LDD_AHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LDD_AHL"; } virtual uint16_t opCode() { return 0x3A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LDD_HLA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LDD_HLA"; } virtual uint16_t opCode() { return 0x32; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LDI_AHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LDI_AHL"; } virtual uint16_t opCode() { return 0x2A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LDI_HLA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LDI_HLA"; } virtual uint16_t opCode() { return 0x22; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LDH_nA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LDH_nA"; } virtual uint16_t opCode() { return 0xE0; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };
class LDH_An : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LDH_An"; } virtual uint16_t opCode() { return 0xF0; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };

class LD_BCnn : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_BCnn"; } virtual uint16_t opCode() { return 0x01; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class LD_DEnn : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_DEnn"; } virtual uint16_t opCode() { return 0x11; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class LD_HLnn : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HLnn"; } virtual uint16_t opCode() { return 0x21; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class LD_SPnn : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_SPnn"; } virtual uint16_t opCode() { return 0x31; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class LD_nnSP : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_nnSP"; } virtual uint16_t opCode() { return 0x08; } virtual int nbCycles() { return 20; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class LD_SPHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_SPHL"; } virtual uint16_t opCode() { return 0xF9; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class LD_HLSPn : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "LD_HLSPn"; } virtual uint16_t opCode() { return 0xF8; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };

class PUSH_BC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "PUSH_BC"; } virtual uint16_t opCode() { return 0xC5; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class PUSH_DE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "PUSH_DE"; } virtual uint16_t opCode() { return 0xD5; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class PUSH_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "PUSH_HL"; } virtual uint16_t opCode() { return 0xE5; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class PUSH_AF : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "PUSH_AF"; } virtual uint16_t opCode() { return 0xF5; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class POP_BC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "POP_BC"; } virtual uint16_t opCode() { return 0xC1; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class POP_DE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "POP_DE"; } virtual uint16_t opCode() { return 0xD1; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class POP_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "POP_HL"; } virtual uint16_t opCode() { return 0xE1; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class POP_AF : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "POP_AF"; } virtual uint16_t opCode() { return 0xF1; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class NOP : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "NOP"; } virtual uint16_t opCode() { return 0x00; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class ADD_AA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_AA"; } virtual uint16_t opCode() { return 0x87; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADD_AB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_AB"; } virtual uint16_t opCode() { return 0x80; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADD_AC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_AC"; } virtual uint16_t opCode() { return 0x81; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADD_AD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_AD"; } virtual uint16_t opCode() { return 0x82; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADD_AE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_AE"; } virtual uint16_t opCode() { return 0x83; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADD_AH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_AH"; } virtual uint16_t opCode() { return 0x84; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADD_AL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_AL"; } virtual uint16_t opCode() { return 0x85; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADD_AHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_AHL"; } virtual uint16_t opCode() { return 0x86; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADD_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_AX"; } virtual uint16_t opCode() { return 0xC6; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };

class ADD_HLBC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_HLBC"; } virtual uint16_t opCode() { return 0x09; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADD_HLDE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_HLDE"; } virtual uint16_t opCode() { return 0x19; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADD_HLHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_HLHL"; } virtual uint16_t opCode() { return 0x29; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADD_HLSP : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_HLSP"; } virtual uint16_t opCode() { return 0x39; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class ADD_SPX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADD_SPX"; } virtual uint16_t opCode() { return 0xE8; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };



class ADC_AA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADC_AA"; } virtual uint16_t opCode() { return 0x8F; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADC_AB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADC_AB"; } virtual uint16_t opCode() { return 0x88; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADC_AC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADC_AC"; } virtual uint16_t opCode() { return 0x89; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADC_AD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADC_AD"; } virtual uint16_t opCode() { return 0x8A; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADC_AE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADC_AE"; } virtual uint16_t opCode() { return 0x8B; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADC_AH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADC_AH"; } virtual uint16_t opCode() { return 0x8C; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADC_AL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADC_AL"; } virtual uint16_t opCode() { return 0x8D; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADC_AHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADC_AHL"; } virtual uint16_t opCode() { return 0x8E; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class ADC_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "ADC_AX"; } virtual uint16_t opCode() { return 0xCE; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };




class SUB_AA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SUB_AA"; } virtual uint16_t opCode() { return 0x97; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SUB_AB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SUB_AB"; } virtual uint16_t opCode() { return 0x90; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SUB_AC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SUB_AC"; } virtual uint16_t opCode() { return 0x91; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SUB_AD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SUB_AD"; } virtual uint16_t opCode() { return 0x92; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SUB_AE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SUB_AE"; } virtual uint16_t opCode() { return 0x93; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SUB_AH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SUB_AH"; } virtual uint16_t opCode() { return 0x94; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SUB_AL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SUB_AL"; } virtual uint16_t opCode() { return 0x95; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SUB_AHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SUB_AHL"; } virtual uint16_t opCode() { return 0x96; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SUB_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SUB_AX"; } virtual uint16_t opCode() { return 0xD6; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };



class SBC_AA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SBC_AA"; } virtual uint16_t opCode() { return 0x9F; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SBC_AB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SBC_AB"; } virtual uint16_t opCode() { return 0x98; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SBC_AC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SBC_AC"; } virtual uint16_t opCode() { return 0x99; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SBC_AD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SBC_AD"; } virtual uint16_t opCode() { return 0x9A; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SBC_AE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SBC_AE"; } virtual uint16_t opCode() { return 0x9B; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SBC_AH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SBC_AH"; } virtual uint16_t opCode() { return 0x9C; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SBC_AL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SBC_AL"; } virtual uint16_t opCode() { return 0x9D; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SBC_AHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SBC_AHL"; } virtual uint16_t opCode() { return 0x9E; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SBC_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SBC_AX"; } virtual uint16_t opCode() { return 0xDE; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };



class AND_AA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "AND_AA"; } virtual uint16_t opCode() { return 0xA7; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class AND_AB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "AND_AB"; } virtual uint16_t opCode() { return 0xA0; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class AND_AC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "AND_AC"; } virtual uint16_t opCode() { return 0xA1; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class AND_AD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "AND_AD"; } virtual uint16_t opCode() { return 0xA2; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class AND_AE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "AND_AE"; } virtual uint16_t opCode() { return 0xA3; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class AND_AH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "AND_AH"; } virtual uint16_t opCode() { return 0xA4; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class AND_AL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "AND_AL"; } virtual uint16_t opCode() { return 0xA5; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class AND_AHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "AND_AHL"; } virtual uint16_t opCode() { return 0xA6; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class AND_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "AND_AX"; } virtual uint16_t opCode() { return 0xE6; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };



class OR_AA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "OR_AA"; } virtual uint16_t opCode() { return 0xB7; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class OR_AB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "OR_AB"; } virtual uint16_t opCode() { return 0xB0; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class OR_AC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "OR_AC"; } virtual uint16_t opCode() { return 0xB1; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class OR_AD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "OR_AD"; } virtual uint16_t opCode() { return 0xB2; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class OR_AE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "OR_AE"; } virtual uint16_t opCode() { return 0xB3; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class OR_AH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "OR_AH"; } virtual uint16_t opCode() { return 0xB4; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class OR_AL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "OR_AL"; } virtual uint16_t opCode() { return 0xB5; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class OR_AHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "OR_AHL"; } virtual uint16_t opCode() { return 0xB6; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class OR_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "OR_AX"; } virtual uint16_t opCode() { return 0xF6; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };



class XOR_AA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "XOR_AA"; } virtual uint16_t opCode() { return 0xAF; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class XOR_AB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "XOR_AB"; } virtual uint16_t opCode() { return 0xA8; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class XOR_AC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "XOR_AC"; } virtual uint16_t opCode() { return 0xA9; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class XOR_AD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "XOR_AD"; } virtual uint16_t opCode() { return 0xAA; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class XOR_AE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "XOR_AE"; } virtual uint16_t opCode() { return 0xAB; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class XOR_AH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "XOR_AH"; } virtual uint16_t opCode() { return 0xAC; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class XOR_AL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "XOR_AL"; } virtual uint16_t opCode() { return 0xAD; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class XOR_AHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "XOR_AHL"; } virtual uint16_t opCode() { return 0xAE; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class XOR_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "XOR_AX"; } virtual uint16_t opCode() { return 0xEE; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };



class CP_AA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CP_AA"; } virtual uint16_t opCode() { return 0xBF; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class CP_AB : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CP_AB"; } virtual uint16_t opCode() { return 0xB8; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class CP_AC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CP_AC"; } virtual uint16_t opCode() { return 0xB9; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class CP_AD : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CP_AD"; } virtual uint16_t opCode() { return 0xBA; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class CP_AE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CP_AE"; } virtual uint16_t opCode() { return 0xBB; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class CP_AH : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CP_AH"; } virtual uint16_t opCode() { return 0xBC; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class CP_AL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CP_AL"; } virtual uint16_t opCode() { return 0xBD; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class CP_AHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CP_AHL"; } virtual uint16_t opCode() { return 0xBE; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class CP_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CP_AX"; } virtual uint16_t opCode() { return 0xFE; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };




class INC_A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_A"; } virtual uint16_t opCode() { return 0x3C; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class INC_B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_B"; } virtual uint16_t opCode() { return 0x04; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class INC_C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_C"; } virtual uint16_t opCode() { return 0x0C; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class INC_D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_D"; } virtual uint16_t opCode() { return 0x14; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class INC_E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_E"; } virtual uint16_t opCode() { return 0x1C; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class INC_H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_H"; } virtual uint16_t opCode() { return 0x24; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class INC_L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_L"; } virtual uint16_t opCode() { return 0x2C; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class INC_HLdereference : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_HLdereference"; } virtual uint16_t opCode() { return 0x34; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class INC_BC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_BC"; } virtual uint16_t opCode() { return 0x03; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class INC_DE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_DE"; } virtual uint16_t opCode() { return 0x13; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class INC_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_HL"; } virtual uint16_t opCode() { return 0x23; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class INC_SP : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "INC_SP"; } virtual uint16_t opCode() { return 0x33; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class DEC_A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_A"; } virtual uint16_t opCode() { return 0x3D; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class DEC_B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_B"; } virtual uint16_t opCode() { return 0x05; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class DEC_C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_C"; } virtual uint16_t opCode() { return 0x0D; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class DEC_D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_D"; } virtual uint16_t opCode() { return 0x15; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class DEC_E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_E"; } virtual uint16_t opCode() { return 0x1D; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class DEC_H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_H"; } virtual uint16_t opCode() { return 0x25; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class DEC_L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_L"; } virtual uint16_t opCode() { return 0x2D; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class DEC_HLdereference : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_HLdereference"; } virtual uint16_t opCode() { return 0x35; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class DEC_BC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_BC"; } virtual uint16_t opCode() { return 0x0B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class DEC_DE : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_DE"; } virtual uint16_t opCode() { return 0x1B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class DEC_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_HL"; } virtual uint16_t opCode() { return 0x2B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class DEC_SP : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DEC_SP"; } virtual uint16_t opCode() { return 0x3B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };




class SWAP_A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SWAP_A"; } virtual uint16_t opCode() { return 0xCB37; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SWAP_B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SWAP_B"; } virtual uint16_t opCode() { return 0xCB30; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SWAP_C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SWAP_C"; } virtual uint16_t opCode() { return 0xCB31; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SWAP_D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SWAP_D"; } virtual uint16_t opCode() { return 0xCB32; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SWAP_E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SWAP_E"; } virtual uint16_t opCode() { return 0xCB33; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SWAP_H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SWAP_H"; } virtual uint16_t opCode() { return 0xCB34; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SWAP_L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SWAP_L"; } virtual uint16_t opCode() { return 0xCB35; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SWAP_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SWAP_HL"; } virtual uint16_t opCode() { return 0xCB36; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class DAA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DAA"; } virtual uint16_t opCode() { return 0x27; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class CPL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CPL"; } virtual uint16_t opCode() { return 0x2F; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class CCF : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CCF"; } virtual uint16_t opCode() { return 0x3F; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SCF : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SCF"; } virtual uint16_t opCode() { return 0x37; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };




class BIT_0A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_0A"; } virtual uint16_t opCode() { return 0xCB47; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_1A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_1A"; } virtual uint16_t opCode() { return 0xCB4F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_2A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_2A"; } virtual uint16_t opCode() { return 0xCB57; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_3A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_3A"; } virtual uint16_t opCode() { return 0xCB5F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_4A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_4A"; } virtual uint16_t opCode() { return 0xCB67; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_5A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_5A"; } virtual uint16_t opCode() { return 0xCB6F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_6A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_6A"; } virtual uint16_t opCode() { return 0xCB77; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_7A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_7A"; } virtual uint16_t opCode() { return 0xCB7F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class BIT_0B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_0B"; } virtual uint16_t opCode() { return 0xCB40; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_1B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_1B"; } virtual uint16_t opCode() { return 0xCB48; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_2B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_2B"; } virtual uint16_t opCode() { return 0xCB50; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_3B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_3B"; } virtual uint16_t opCode() { return 0xCB58; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_4B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_4B"; } virtual uint16_t opCode() { return 0xCB60; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_5B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_5B"; } virtual uint16_t opCode() { return 0xCB68; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_6B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_6B"; } virtual uint16_t opCode() { return 0xCB70; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_7B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_7B"; } virtual uint16_t opCode() { return 0xCB78; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class BIT_0C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_0C"; } virtual uint16_t opCode() { return 0xCB41; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_1C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_1C"; } virtual uint16_t opCode() { return 0xCB49; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_2C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_2C"; } virtual uint16_t opCode() { return 0xCB51; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_3C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_3C"; } virtual uint16_t opCode() { return 0xCB59; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_4C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_4C"; } virtual uint16_t opCode() { return 0xCB61; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_5C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_5C"; } virtual uint16_t opCode() { return 0xCB69; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_6C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_6C"; } virtual uint16_t opCode() { return 0xCB71; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_7C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_7C"; } virtual uint16_t opCode() { return 0xCB79; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class BIT_0D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_0D"; } virtual uint16_t opCode() { return 0xCB42; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_1D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_1D"; } virtual uint16_t opCode() { return 0xCB4A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_2D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_2D"; } virtual uint16_t opCode() { return 0xCB52; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_3D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_3D"; } virtual uint16_t opCode() { return 0xCB5A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_4D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_4D"; } virtual uint16_t opCode() { return 0xCB62; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_5D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_5D"; } virtual uint16_t opCode() { return 0xCB6A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_6D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_6D"; } virtual uint16_t opCode() { return 0xCB72; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_7D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_7D"; } virtual uint16_t opCode() { return 0xCB7A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class BIT_0E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_0E"; } virtual uint16_t opCode() { return 0xCB43; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_1E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_1E"; } virtual uint16_t opCode() { return 0xCB4B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_2E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_2E"; } virtual uint16_t opCode() { return 0xCB53; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_3E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_3E"; } virtual uint16_t opCode() { return 0xCB5B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_4E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_4E"; } virtual uint16_t opCode() { return 0xCB63; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_5E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_5E"; } virtual uint16_t opCode() { return 0xCB6B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_6E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_6E"; } virtual uint16_t opCode() { return 0xCB73; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_7E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_7E"; } virtual uint16_t opCode() { return 0xCB7B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class BIT_0H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_0H"; } virtual uint16_t opCode() { return 0xCB44; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_1H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_1H"; } virtual uint16_t opCode() { return 0xCB4C; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_2H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_2H"; } virtual uint16_t opCode() { return 0xCB54; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_3H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_3H"; } virtual uint16_t opCode() { return 0xCB5C; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_4H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_4H"; } virtual uint16_t opCode() { return 0xCB64; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_5H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_5H"; } virtual uint16_t opCode() { return 0xCB6C; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_6H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_6H"; } virtual uint16_t opCode() { return 0xCB74; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_7H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_7H"; } virtual uint16_t opCode() { return 0xCB7C; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class BIT_0L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_0L"; } virtual uint16_t opCode() { return 0xCB45; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_1L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_1L"; } virtual uint16_t opCode() { return 0xCB4D; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_2L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_2L"; } virtual uint16_t opCode() { return 0xCB55; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_3L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_3L"; } virtual uint16_t opCode() { return 0xCB5D; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_4L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_4L"; } virtual uint16_t opCode() { return 0xCB65; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_5L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_5L"; } virtual uint16_t opCode() { return 0xCB6D; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_6L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_6L"; } virtual uint16_t opCode() { return 0xCB75; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_7L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_7L"; } virtual uint16_t opCode() { return 0xCB7D; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class BIT_0HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_0HL"; } virtual uint16_t opCode() { return 0xCB46; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_1HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_1HL"; } virtual uint16_t opCode() { return 0xCB4E; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_2HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_2HL"; } virtual uint16_t opCode() { return 0xCB56; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_3HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_3HL"; } virtual uint16_t opCode() { return 0xCB5E; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_4HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_4HL"; } virtual uint16_t opCode() { return 0xCB66; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_5HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_5HL"; } virtual uint16_t opCode() { return 0xCB6E; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_6HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_6HL"; } virtual uint16_t opCode() { return 0xCB76; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class BIT_7HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "BIT_7HL"; } virtual uint16_t opCode() { return 0xCB7E; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class SET_0A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_0A"; } virtual uint16_t opCode() { return 0xCBC7; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_1A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_1A"; } virtual uint16_t opCode() { return 0xCBCF; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_2A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_2A"; } virtual uint16_t opCode() { return 0xCBD7; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_3A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_3A"; } virtual uint16_t opCode() { return 0xCBDF; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_4A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_4A"; } virtual uint16_t opCode() { return 0xCBE7; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_5A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_5A"; } virtual uint16_t opCode() { return 0xCBEF; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_6A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_6A"; } virtual uint16_t opCode() { return 0xCBF7; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_7A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_7A"; } virtual uint16_t opCode() { return 0xCBFF; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class SET_0B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_0B"; } virtual uint16_t opCode() { return 0xCBC0; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_1B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_1B"; } virtual uint16_t opCode() { return 0xCBC8; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_2B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_2B"; } virtual uint16_t opCode() { return 0xCBD0; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_3B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_3B"; } virtual uint16_t opCode() { return 0xCBD8; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_4B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_4B"; } virtual uint16_t opCode() { return 0xCBE0; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_5B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_5B"; } virtual uint16_t opCode() { return 0xCBE8; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_6B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_6B"; } virtual uint16_t opCode() { return 0xCBF0; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_7B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_7B"; } virtual uint16_t opCode() { return 0xCBF8; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class SET_0C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_0C"; } virtual uint16_t opCode() { return 0xCBC1; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_1C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_1C"; } virtual uint16_t opCode() { return 0xCBC9; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_2C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_2C"; } virtual uint16_t opCode() { return 0xCBD1; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_3C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_3C"; } virtual uint16_t opCode() { return 0xCBD9; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_4C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_4C"; } virtual uint16_t opCode() { return 0xCBE1; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_5C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_5C"; } virtual uint16_t opCode() { return 0xCBE9; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_6C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_6C"; } virtual uint16_t opCode() { return 0xCBF1; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_7C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_7C"; } virtual uint16_t opCode() { return 0xCBF9; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class SET_0D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_0D"; } virtual uint16_t opCode() { return 0xCBC2; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_1D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_1D"; } virtual uint16_t opCode() { return 0xCBCA; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_2D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_2D"; } virtual uint16_t opCode() { return 0xCBD2; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_3D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_3D"; } virtual uint16_t opCode() { return 0xCBDA; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_4D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_4D"; } virtual uint16_t opCode() { return 0xCBE2; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_5D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_5D"; } virtual uint16_t opCode() { return 0xCBEA; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_6D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_6D"; } virtual uint16_t opCode() { return 0xCBF2; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_7D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_7D"; } virtual uint16_t opCode() { return 0xCBFA; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class SET_0E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_0E"; } virtual uint16_t opCode() { return 0xCBC3; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_1E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_1E"; } virtual uint16_t opCode() { return 0xCBCB; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_2E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_2E"; } virtual uint16_t opCode() { return 0xCBD3; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_3E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_3E"; } virtual uint16_t opCode() { return 0xCBDB; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_4E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_4E"; } virtual uint16_t opCode() { return 0xCBE3; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_5E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_5E"; } virtual uint16_t opCode() { return 0xCBEB; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_6E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_6E"; } virtual uint16_t opCode() { return 0xCBF3; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_7E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_7E"; } virtual uint16_t opCode() { return 0xCBFB; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class SET_0H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_0H"; } virtual uint16_t opCode() { return 0xCBC4; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_1H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_1H"; } virtual uint16_t opCode() { return 0xCBCC; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_2H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_2H"; } virtual uint16_t opCode() { return 0xCBD4; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_3H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_3H"; } virtual uint16_t opCode() { return 0xCBDC; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_4H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_4H"; } virtual uint16_t opCode() { return 0xCBE4; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_5H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_5H"; } virtual uint16_t opCode() { return 0xCBEC; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_6H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_6H"; } virtual uint16_t opCode() { return 0xCBF4; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_7H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_7H"; } virtual uint16_t opCode() { return 0xCBFC; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class SET_0L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_0L"; } virtual uint16_t opCode() { return 0xCBC5; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_1L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_1L"; } virtual uint16_t opCode() { return 0xCBCD; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_2L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_2L"; } virtual uint16_t opCode() { return 0xCBD5; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_3L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_3L"; } virtual uint16_t opCode() { return 0xCBDD; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_4L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_4L"; } virtual uint16_t opCode() { return 0xCBE5; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_5L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_5L"; } virtual uint16_t opCode() { return 0xCBED; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_6L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_6L"; } virtual uint16_t opCode() { return 0xCBF5; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_7L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_7L"; } virtual uint16_t opCode() { return 0xCBFD; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class SET_0HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_0HL"; } virtual uint16_t opCode() { return 0xCBC6; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_1HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_1HL"; } virtual uint16_t opCode() { return 0xCBCE; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_2HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_2HL"; } virtual uint16_t opCode() { return 0xCBD6; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_3HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_3HL"; } virtual uint16_t opCode() { return 0xCBDE; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_4HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_4HL"; } virtual uint16_t opCode() { return 0xCBE6; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_5HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_5HL"; } virtual uint16_t opCode() { return 0xCBEE; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_6HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_6HL"; } virtual uint16_t opCode() { return 0xCBF6; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SET_7HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SET_7HL"; } virtual uint16_t opCode() { return 0xCBFE; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };




class RES_0A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_0A"; } virtual uint16_t opCode() { return 0xCB87; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_1A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_1A"; } virtual uint16_t opCode() { return 0xCB8F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_2A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_2A"; } virtual uint16_t opCode() { return 0xCB97; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_3A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_3A"; } virtual uint16_t opCode() { return 0xCB9F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_4A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_4A"; } virtual uint16_t opCode() { return 0xCBA7; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_5A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_5A"; } virtual uint16_t opCode() { return 0xCBAF; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_6A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_6A"; } virtual uint16_t opCode() { return 0xCBB7; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_7A : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_7A"; } virtual uint16_t opCode() { return 0xCBBF; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RES_0B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_0B"; } virtual uint16_t opCode() { return 0xCB80; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_1B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_1B"; } virtual uint16_t opCode() { return 0xCB88; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_2B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_2B"; } virtual uint16_t opCode() { return 0xCB90; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_3B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_3B"; } virtual uint16_t opCode() { return 0xCB98; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_4B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_4B"; } virtual uint16_t opCode() { return 0xCBA0; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_5B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_5B"; } virtual uint16_t opCode() { return 0xCBA8; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_6B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_6B"; } virtual uint16_t opCode() { return 0xCBB0; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_7B : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_7B"; } virtual uint16_t opCode() { return 0xCBB8; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RES_0C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_0C"; } virtual uint16_t opCode() { return 0xCB81; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_1C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_1C"; } virtual uint16_t opCode() { return 0xCB89; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_2C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_2C"; } virtual uint16_t opCode() { return 0xCB91; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_3C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_3C"; } virtual uint16_t opCode() { return 0xCB99; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_4C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_4C"; } virtual uint16_t opCode() { return 0xCBA1; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_5C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_5C"; } virtual uint16_t opCode() { return 0xCBA9; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_6C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_6C"; } virtual uint16_t opCode() { return 0xCBB1; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_7C : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_7C"; } virtual uint16_t opCode() { return 0xCBB9; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RES_0D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_0D"; } virtual uint16_t opCode() { return 0xCB82; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_1D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_1D"; } virtual uint16_t opCode() { return 0xCB8A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_2D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_2D"; } virtual uint16_t opCode() { return 0xCB92; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_3D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_3D"; } virtual uint16_t opCode() { return 0xCB9A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_4D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_4D"; } virtual uint16_t opCode() { return 0xCBA2; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_5D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_5D"; } virtual uint16_t opCode() { return 0xCBAA; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_6D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_6D"; } virtual uint16_t opCode() { return 0xCBB2; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_7D : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_7D"; } virtual uint16_t opCode() { return 0xCBBA; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RES_0E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_0E"; } virtual uint16_t opCode() { return 0xCB83; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_1E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_1E"; } virtual uint16_t opCode() { return 0xCB8B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_2E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_2E"; } virtual uint16_t opCode() { return 0xCB93; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_3E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_3E"; } virtual uint16_t opCode() { return 0xCB9B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_4E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_4E"; } virtual uint16_t opCode() { return 0xCBA3; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_5E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_5E"; } virtual uint16_t opCode() { return 0xCBAB; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_6E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_6E"; } virtual uint16_t opCode() { return 0xCBB3; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_7E : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_7E"; } virtual uint16_t opCode() { return 0xCBBB; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RES_0H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_0H"; } virtual uint16_t opCode() { return 0xCB84; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_1H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_1H"; } virtual uint16_t opCode() { return 0xCB8C; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_2H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_2H"; } virtual uint16_t opCode() { return 0xCB94; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_3H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_3H"; } virtual uint16_t opCode() { return 0xCB9C; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_4H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_4H"; } virtual uint16_t opCode() { return 0xCBA4; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_5H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_5H"; } virtual uint16_t opCode() { return 0xCBAC; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_6H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_6H"; } virtual uint16_t opCode() { return 0xCBB4; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_7H : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_7H"; } virtual uint16_t opCode() { return 0xCBBC; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RES_0L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_0L"; } virtual uint16_t opCode() { return 0xCB85; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_1L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_1L"; } virtual uint16_t opCode() { return 0xCB8D; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_2L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_2L"; } virtual uint16_t opCode() { return 0xCB95; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_3L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_3L"; } virtual uint16_t opCode() { return 0xCB9D; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_4L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_4L"; } virtual uint16_t opCode() { return 0xCBA5; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_5L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_5L"; } virtual uint16_t opCode() { return 0xCBAD; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_6L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_6L"; } virtual uint16_t opCode() { return 0xCBB5; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_7L : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_7L"; } virtual uint16_t opCode() { return 0xCBBD; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RES_0HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_0HL"; } virtual uint16_t opCode() { return 0xCB86; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_1HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_1HL"; } virtual uint16_t opCode() { return 0xCB8E; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_2HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_2HL"; } virtual uint16_t opCode() { return 0xCB96; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_3HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_3HL"; } virtual uint16_t opCode() { return 0xCB9E; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_4HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_4HL"; } virtual uint16_t opCode() { return 0xCBA6; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_5HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_5HL"; } virtual uint16_t opCode() { return 0xCBAE; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_6HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_6HL"; } virtual uint16_t opCode() { return 0xCBB6; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RES_7HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RES_7HL"; } virtual uint16_t opCode() { return 0xCBBE; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class RRCA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RRCA"; } virtual uint16_t opCode() { return 0x0F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RRC_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RRC_AX"; } virtual uint16_t opCode() { return 0xCB0F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RRC_BX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RRC_BX"; } virtual uint16_t opCode() { return 0xCB08; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RRC_CX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RRC_CX"; } virtual uint16_t opCode() { return 0xCB09; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RRC_DX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RRC_DX"; } virtual uint16_t opCode() { return 0xCB0A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RRC_EX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RRC_EX"; } virtual uint16_t opCode() { return 0xCB0B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RRC_HX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RRC_HX"; } virtual uint16_t opCode() { return 0xCB0C; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RRC_LX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RRC_LX"; } virtual uint16_t opCode() { return 0xCB0D; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RRC_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RRC_HL"; } virtual uint16_t opCode() { return 0xCB0E; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class RLCA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RLCA"; } virtual uint16_t opCode() { return 0x07; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RLC_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RLC_AX"; } virtual uint16_t opCode() { return 0xCB07; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RLC_BX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RLC_BX"; } virtual uint16_t opCode() { return 0xCB00; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RLC_CX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RLC_CX"; } virtual uint16_t opCode() { return 0xCB01; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RLC_DX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RLC_DX"; } virtual uint16_t opCode() { return 0xCB02; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RLC_EX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RLC_EX"; } virtual uint16_t opCode() { return 0xCB03; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RLC_HX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RLC_HX"; } virtual uint16_t opCode() { return 0xCB04; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RLC_LX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RLC_LX"; } virtual uint16_t opCode() { return 0xCB05; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RLC_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RLC_HL"; } virtual uint16_t opCode() { return 0xCB06; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class RLA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RLA"; } virtual uint16_t opCode() { return 0x17; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RL_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RL_AX"; } virtual uint16_t opCode() { return 0xCB17; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RL_BX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RL_BX"; } virtual uint16_t opCode() { return 0xCB10; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RL_CX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RL_CX"; } virtual uint16_t opCode() { return 0xCB11; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RL_DX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RL_DX"; } virtual uint16_t opCode() { return 0xCB12; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RL_EX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RL_EX"; } virtual uint16_t opCode() { return 0xCB13; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RL_HX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RL_HX"; } virtual uint16_t opCode() { return 0xCB14; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RL_LX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RL_LX"; } virtual uint16_t opCode() { return 0xCB15; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RL_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RL_HL"; } virtual uint16_t opCode() { return 0xCB16; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class RRA : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RRA"; } virtual uint16_t opCode() { return 0x1F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RR_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RR_AX"; } virtual uint16_t opCode() { return 0xCB1F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RR_BX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RR_BX"; } virtual uint16_t opCode() { return 0xCB18; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RR_CX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RR_CX"; } virtual uint16_t opCode() { return 0xCB19; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RR_DX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RR_DX"; } virtual uint16_t opCode() { return 0xCB1A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RR_EX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RR_EX"; } virtual uint16_t opCode() { return 0xCB1B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RR_HX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RR_HX"; } virtual uint16_t opCode() { return 0xCB1C; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RR_LX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RR_LX"; } virtual uint16_t opCode() { return 0xCB1D; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RR_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RR_HL"; } virtual uint16_t opCode() { return 0xCB1E; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };




class SLA_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SLA_AX"; } virtual uint16_t opCode() { return 0xCB27; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SLA_BX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SLA_BX"; } virtual uint16_t opCode() { return 0xCB20; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SLA_CX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SLA_CX"; } virtual uint16_t opCode() { return 0xCB21; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SLA_DX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SLA_DX"; } virtual uint16_t opCode() { return 0xCB22; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SLA_EX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SLA_EX"; } virtual uint16_t opCode() { return 0xCB23; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SLA_HX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SLA_HX"; } virtual uint16_t opCode() { return 0xCB24; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SLA_LX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SLA_LX"; } virtual uint16_t opCode() { return 0xCB25; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SLA_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SLA_HL"; } virtual uint16_t opCode() { return 0xCB26; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class SRA_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRA_AX"; } virtual uint16_t opCode() { return 0xCB2F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRA_BX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRA_BX"; } virtual uint16_t opCode() { return 0xCB28; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRA_CX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRA_CX"; } virtual uint16_t opCode() { return 0xCB29; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRA_DX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRA_DX"; } virtual uint16_t opCode() { return 0xCB2A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRA_EX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRA_EX"; } virtual uint16_t opCode() { return 0xCB2B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRA_HX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRA_HX"; } virtual uint16_t opCode() { return 0xCB2C; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRA_LX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRA_LX"; } virtual uint16_t opCode() { return 0xCB2D; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRA_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRA_HL"; } virtual uint16_t opCode() { return 0xCB2E; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class SRL_AX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRL_AX"; } virtual uint16_t opCode() { return 0xCB3F; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRL_BX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRL_BX"; } virtual uint16_t opCode() { return 0xCB38; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRL_CX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRL_CX"; } virtual uint16_t opCode() { return 0xCB39; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRL_DX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRL_DX"; } virtual uint16_t opCode() { return 0xCB3A; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRL_EX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRL_EX"; } virtual uint16_t opCode() { return 0xCB3B; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRL_HX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRL_HX"; } virtual uint16_t opCode() { return 0xCB3C; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRL_LX : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRL_LX"; } virtual uint16_t opCode() { return 0xCB3D; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class SRL_HL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "SRL_HL"; } virtual uint16_t opCode() { return 0xCB3E; } virtual int nbCycles() { return 16; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class HALT : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "HALT"; } virtual uint16_t opCode() { return 0x76; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class STOP : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "STOP"; } virtual uint16_t opCode() { return 0x10; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };



class EI : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "EI"; } virtual uint16_t opCode() { return 0xFB; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class DI : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "DI"; } virtual uint16_t opCode() { return 0xF3; } virtual int nbCycles() { return 4; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class JP : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "JP"; } virtual uint16_t opCode() { return 0xC3; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class JPNZ : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "JPNZ"; } virtual uint16_t opCode() { return 0xC2; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class JPZ : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "JPZ"; } virtual uint16_t opCode() { return 0xCA; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class JPNC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "JPNC"; } virtual uint16_t opCode() { return 0xD2; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class JPC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "JPC"; } virtual uint16_t opCode() { return 0xDA; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class JPHL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "JPHL"; } virtual uint16_t opCode() { return 0xE9; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class JR : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "JR"; } virtual uint16_t opCode() { return 0x18; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };
class JRNZ : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "JRNZ"; } virtual uint16_t opCode() { return 0x20; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };
class JRZ : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "JRZ"; } virtual uint16_t opCode() { return 0x28; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };
class JRNC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "JRNC"; } virtual uint16_t opCode() { return 0x30; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };
class JRC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "JRC"; } virtual uint16_t opCode() { return 0x38; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 1;} private: InstructionArg _arg; };

class CALL : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CALL"; } virtual uint16_t opCode() { return 0xCD; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class CALLNZ : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CALLNZ"; } virtual uint16_t opCode() { return 0xC4; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class CALLZ : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CALLZ"; } virtual uint16_t opCode() { return 0xCC; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class CALLNC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CALLNC"; } virtual uint16_t opCode() { return 0xD4; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };
class CALLC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "CALLC"; } virtual uint16_t opCode() { return 0xDC; } virtual int nbCycles() { return 12; } virtual bool hasArg() {return (1 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 2;} private: InstructionArg _arg; };


class RST_0x00 : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RST_0x00"; } virtual uint16_t opCode() { return 0xC7; } virtual int nbCycles() { return 32; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RST_0x08 : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RST_0x08"; } virtual uint16_t opCode() { return 0xCF; } virtual int nbCycles() { return 32; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RST_0x10 : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RST_0x10"; } virtual uint16_t opCode() { return 0xD7; } virtual int nbCycles() { return 32; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RST_0x18 : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RST_0x18"; } virtual uint16_t opCode() { return 0xDF; } virtual int nbCycles() { return 32; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RST_0x20 : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RST_0x20"; } virtual uint16_t opCode() { return 0xE7; } virtual int nbCycles() { return 32; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RST_0x28 : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RST_0x28"; } virtual uint16_t opCode() { return 0xEF; } virtual int nbCycles() { return 32; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RST_0x30 : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RST_0x30"; } virtual uint16_t opCode() { return 0xF7; } virtual int nbCycles() { return 32; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RST_0x38 : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RST_0x38"; } virtual uint16_t opCode() { return 0xFF; } virtual int nbCycles() { return 32; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };

class RET : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RET"; } virtual uint16_t opCode() { return 0xC9; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RETNZ : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RETNZ"; } virtual uint16_t opCode() { return 0xC0; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RETZ : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RETZ"; } virtual uint16_t opCode() { return 0xC8; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RETNC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RETNC"; } virtual uint16_t opCode() { return 0xD0; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RETC : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RETC"; } virtual uint16_t opCode() { return 0xD8; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
class RETI : public Instruction{ public: virtual void exec(Processor *p); virtual const char *toStr() { return "RETI"; } virtual uint16_t opCode() { return 0xD9; } virtual int nbCycles() { return 8; } virtual bool hasArg() {return (0 == 1);} virtual void setArg(InstructionArg &arg) {_arg = arg;} virtual int argSize() {return 0;} private: InstructionArg _arg; };
